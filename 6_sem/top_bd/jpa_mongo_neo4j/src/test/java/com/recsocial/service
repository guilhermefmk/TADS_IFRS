package com.recsocial.service;

import com.recsocial.model.mongodb.User;
import com.recsocial.repository.mongodb.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

class UserServiceTest {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserService userService;

    private User user;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        user = new User();
        user.setId("user123");
        user.setName("John Doe");
        user.setBio("Software Developer");
        user.setInterests("Coding, Music");
    }

    @Test
    void testCreateUser() {
        when(userRepository.save(any(User.class))).thenReturn(user);
        User createdUser = userService.createUser(user);
        verify(userRepository, times(1)).save(user);
        assertEquals(user.getId(), createdUser.getId());
    }

    @Test
    void testGetUserById() {
        when(userRepository.findById("user123")).thenReturn(Optional.of(user));
        User foundUser = userService.getUserById("user123");
        assertEquals(user.getId(), foundUser.getId());
    }

    @Test
    void testUpdateUser() {
        when(userRepository.save(any(User.class))).thenReturn(user);
        User updatedUser = userService.updateUser(user);
        verify(userRepository, times(1)).save(user);
        assertEquals(user.getId(), updatedUser.getId());
    }

    @Test
    void testDeleteUser() {
        userService.deleteUser("user123");
        verify(userRepository, times(1)).deleteById("user123");
    }
}